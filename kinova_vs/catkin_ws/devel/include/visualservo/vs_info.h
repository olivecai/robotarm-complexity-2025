// Generated by gencpp from file visualservo/vs_info.msg
// DO NOT EDIT!


#ifndef VISUALSERVO_MESSAGE_VS_INFO_H
#define VISUALSERVO_MESSAGE_VS_INFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace visualservo
{
template <class ContainerAllocator>
struct vs_info_
{
  typedef vs_info_<ContainerAllocator> Type;

  vs_info_()
    : success(false)
    , iterations(0)
    , error_vector()  {
    }
  vs_info_(const ContainerAllocator& _alloc)
    : success(false)
    , iterations(0)
    , error_vector(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef int32_t _iterations_type;
  _iterations_type iterations;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _error_vector_type;
  _error_vector_type error_vector;





  typedef boost::shared_ptr< ::visualservo::vs_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::visualservo::vs_info_<ContainerAllocator> const> ConstPtr;

}; // struct vs_info_

typedef ::visualservo::vs_info_<std::allocator<void> > vs_info;

typedef boost::shared_ptr< ::visualservo::vs_info > vs_infoPtr;
typedef boost::shared_ptr< ::visualservo::vs_info const> vs_infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::visualservo::vs_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::visualservo::vs_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::visualservo::vs_info_<ContainerAllocator1> & lhs, const ::visualservo::vs_info_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.iterations == rhs.iterations &&
    lhs.error_vector == rhs.error_vector;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::visualservo::vs_info_<ContainerAllocator1> & lhs, const ::visualservo::vs_info_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace visualservo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::visualservo::vs_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::visualservo::vs_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::visualservo::vs_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::visualservo::vs_info_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::visualservo::vs_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::visualservo::vs_info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::visualservo::vs_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "20b6e62368b4284b0dbbe944e7d01ad3";
  }

  static const char* value(const ::visualservo::vs_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x20b6e62368b4284bULL;
  static const uint64_t static_value2 = 0x0dbbe944e7d01ad3ULL;
};

template<class ContainerAllocator>
struct DataType< ::visualservo::vs_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "visualservo/vs_info";
  }

  static const char* value(const ::visualservo::vs_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::visualservo::vs_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool success\n"
"int32 iterations\n"
"float32[] error_vector\n"
;
  }

  static const char* value(const ::visualservo::vs_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::visualservo::vs_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.iterations);
      stream.next(m.error_vector);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct vs_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::visualservo::vs_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::visualservo::vs_info_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "iterations: ";
    Printer<int32_t>::stream(s, indent + "  ", v.iterations);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "error_vector: ";
    if (v.error_vector.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.error_vector.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.error_vector[i]);
    }
    if (v.error_vector.empty() || true)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISUALSERVO_MESSAGE_VS_INFO_H
